// Mocks generated by Mockito 5.3.2 from annotations
// in movies/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i6;
import 'package:core/core.dart' as _i4;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/movies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetNowPlayingMovies_1 extends _i1.SmartFake
    implements _i3.GetNowPlayingMovies {
  _FakeGetNowPlayingMovies_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPopularMovies_2 extends _i1.SmartFake
    implements _i3.GetPopularMovies {
  _FakeGetPopularMovies_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTopRatedMovies_3 extends _i1.SmartFake
    implements _i3.GetTopRatedMovies {
  _FakeGetTopRatedMovies_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMovieDetail_4 extends _i1.SmartFake
    implements _i3.GetMovieDetail {
  _FakeGetMovieDetail_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMovieRecommendations_5 extends _i1.SmartFake
    implements _i3.GetMovieRecommendations {
  _FakeGetMovieRecommendations_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchlistMovies_6 extends _i1.SmartFake
    implements _i3.GetWatchlistMovies {
  _FakeGetWatchlistMovies_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchListStatus_7 extends _i1.SmartFake
    implements _i3.GetWatchListStatus {
  _FakeGetWatchListStatus_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveWatchlist_8 extends _i1.SmartFake implements _i3.SaveWatchlist {
  _FakeSaveWatchlist_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveWatchlist_9 extends _i1.SmartFake
    implements _i3.RemoveWatchlist {
  _FakeRemoveWatchlist_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieState_10 extends _i1.SmartFake implements _i3.MovieState {
  _FakeMovieState_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i4.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingMovies,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>.value(
            _FakeEither_0<_i4.Failure, List<_i4.Movie>>(
          this,
          Invocation.method(
            #getNowPlayingMovies,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>.value(
            _FakeEither_0<_i4.Failure, List<_i4.Movie>>(
          this,
          Invocation.method(
            #getPopularMovies,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>.value(
            _FakeEither_0<_i4.Failure, List<_i4.Movie>>(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, _i4.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetail,
          [id],
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, _i4.MovieDetail>>.value(
            _FakeEither_0<_i4.Failure, _i4.MovieDetail>(
          this,
          Invocation.method(
            #getMovieDetail,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, _i4.MovieDetail>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>> getMovieRecommendations(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieRecommendations,
          [id],
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>.value(
            _FakeEither_0<_i4.Failure, List<_i4.Movie>>(
          this,
          Invocation.method(
            #getMovieRecommendations,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [query],
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>.value(
            _FakeEither_0<_i4.Failure, List<_i4.Movie>>(
          this,
          Invocation.method(
            #searchMovies,
            [query],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, String>> saveWatchlist(
          _i4.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWatchlist,
          [movie],
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, String>>.value(
            _FakeEither_0<_i4.Failure, String>(
          this,
          Invocation.method(
            #saveWatchlist,
            [movie],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, String>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, String>> removeWatchlist(
          _i4.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeWatchlist,
          [movie],
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, String>>.value(
            _FakeEither_0<_i4.Failure, String>(
          this,
          Invocation.method(
            #removeWatchlist,
            [movie],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, String>>);
  @override
  _i5.Future<bool> isAddedToWatchlist(int? id) => (super.noSuchMethod(
        Invocation.method(
          #isAddedToWatchlist,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>> getWatchlistMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWatchlistMovies,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>.value(
            _FakeEither_0<_i4.Failure, List<_i4.Movie>>(
          this,
          Invocation.method(
            #getWatchlistMovies,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i4.Failure, List<_i4.Movie>>>);
}

/// A class which mocks [MovieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieBloc extends _i1.Mock implements _i3.MovieBloc {
  MockMovieBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetNowPlayingMovies get playingMovies => (super.noSuchMethod(
        Invocation.getter(#playingMovies),
        returnValue: _FakeGetNowPlayingMovies_1(
          this,
          Invocation.getter(#playingMovies),
        ),
      ) as _i3.GetNowPlayingMovies);
  @override
  _i3.GetPopularMovies get popularMovies => (super.noSuchMethod(
        Invocation.getter(#popularMovies),
        returnValue: _FakeGetPopularMovies_2(
          this,
          Invocation.getter(#popularMovies),
        ),
      ) as _i3.GetPopularMovies);
  @override
  _i3.GetTopRatedMovies get topRatedMovies => (super.noSuchMethod(
        Invocation.getter(#topRatedMovies),
        returnValue: _FakeGetTopRatedMovies_3(
          this,
          Invocation.getter(#topRatedMovies),
        ),
      ) as _i3.GetTopRatedMovies);
  @override
  _i3.GetMovieDetail get detailMovies => (super.noSuchMethod(
        Invocation.getter(#detailMovies),
        returnValue: _FakeGetMovieDetail_4(
          this,
          Invocation.getter(#detailMovies),
        ),
      ) as _i3.GetMovieDetail);
  @override
  _i3.GetMovieRecommendations get recommendationMovies => (super.noSuchMethod(
        Invocation.getter(#recommendationMovies),
        returnValue: _FakeGetMovieRecommendations_5(
          this,
          Invocation.getter(#recommendationMovies),
        ),
      ) as _i3.GetMovieRecommendations);
  @override
  _i3.GetWatchlistMovies get watchlistMovies => (super.noSuchMethod(
        Invocation.getter(#watchlistMovies),
        returnValue: _FakeGetWatchlistMovies_6(
          this,
          Invocation.getter(#watchlistMovies),
        ),
      ) as _i3.GetWatchlistMovies);
  @override
  _i3.GetWatchListStatus get watchlistStatus => (super.noSuchMethod(
        Invocation.getter(#watchlistStatus),
        returnValue: _FakeGetWatchListStatus_7(
          this,
          Invocation.getter(#watchlistStatus),
        ),
      ) as _i3.GetWatchListStatus);
  @override
  _i3.SaveWatchlist get saveWatchlist => (super.noSuchMethod(
        Invocation.getter(#saveWatchlist),
        returnValue: _FakeSaveWatchlist_8(
          this,
          Invocation.getter(#saveWatchlist),
        ),
      ) as _i3.SaveWatchlist);
  @override
  _i3.RemoveWatchlist get removeWatchlist => (super.noSuchMethod(
        Invocation.getter(#removeWatchlist),
        returnValue: _FakeRemoveWatchlist_9(
          this,
          Invocation.getter(#removeWatchlist),
        ),
      ) as _i3.RemoveWatchlist);
  @override
  _i3.MovieState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMovieState_10(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.MovieState);
  @override
  _i5.Stream<_i3.MovieState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.MovieState>.empty(),
      ) as _i5.Stream<_i3.MovieState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i3.MovieEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i3.MovieEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.MovieState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i3.MovieEvent>(
    _i6.EventHandler<E, _i3.MovieState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i3.MovieEvent, _i3.MovieState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i3.MovieState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
